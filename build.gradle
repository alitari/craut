buildscript {
    repositories {       
		maven { url 'http://dl.bintray.com/msgilligan/maven' }
		maven { url 'http://jcenter.bintray.com' }
		mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.4.RELEASE")
        classpath("org.cloudfoundry:cf-gradle-plugin:1.0.1")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: "jacoco"
apply plugin: 'war'
apply plugin: 'cloudfoundry'
apply plugin: 'findbugs'
        
        
defaultTasks "clean", "build"        


test {

    useJUnit {
    }
 
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
    
}




jacoco {
    toolVersion = "0.7.1.201405082137"

}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoHtml"
    }
	 additionalSourceDirs = files("src/main/java")
}

findbugs {
        toolVersion = "3.0.0"
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$buildDir/reports/findbugs")
        effort = "max"
        reportLevel = "low"
        //visitors = ["FindSqlInjection", "SwitchFallthrough"]
        //omitVisitors = ["FindNonShortCircuit"]
        //includeFilter = file("$rootProject.projectDir/.findbugs/includeFilter.xml")
        excludeFilter = file("$rootProject.projectDir/.findbugs/excludeFilter.xml")
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}


repositories {
    mavenLocal()
    mavenCentral()
	maven {
		url 'http://repo.spring.io/milestone'
	}
}

dependencies {
    // tag::jetty[]	
    compile ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile "org.springframework.boot:spring-boot-starter-jetty"
    // end::jetty[]
    // tag::actuator[]
    compile "org.springframework.boot:spring-boot-starter-actuator"
    
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    
    runtime "org.hsqldb:hsqldb"
    runtime "mysql:mysql-connector-java:5.1.31"
    
    //compile("org.codehaus.groovy:groovy-all")
    compile "org.codehaus.groovy:groovy"
    compile "org.codehaus.groovy:groovy-templates"
    
    // end::actuator[]
    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    
}


springBoot {
	mainClass = "de.craut.Application"
	backupSource = true
}

jar {
    baseName = 'craut'
    version =  '0.1.0'
}

def springBootWarLauncherClassName = "org.springframework.boot.loader.WarLauncher"

cloudfoundry {
      target = "https://api.run.pivotal.io"
      space = "development"
      organization = "alexkrieg-test"
      file = file("build/libs/craut.war")
      uri = "craut.cfapps.io"
      memory = 512
      instances = 1
      env = [ "key": "value" ]
      
  }
